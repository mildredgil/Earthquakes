{"version":3,"sources":["GoogleMapsContext.js","AppContainer.js","AppContext.js","Map.js","Location.js","App.js","serviceWorker.js","index.js"],"names":["GoogleMapsContext","React","GoogleMapsContextProvider","GoogleApiWrapper","apiKey","libraries","props","val","google","Provider","value","children","Consumer","useApp","useContext","useState","autocompleteService","setAutoCompleteService","inputValue","setInputValue","options","setOptions","selected","setSelected","console","log","initialLat","initialLng","error","zoom","markersData","state","setState","useEffect","getUserLocation","maps","a","places","AutocompleteService","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","message","enableHighAccuracy","timeout","maximumAge","geocoder","Geocoder","geocode","place_id","results","status","getEarthquakesInfo","geometry","viewport","moveMapViewport","location","lat","lng","window","alert","bounds","fetch","north","south","east","west","then","res","json","data","useMemo","throttle","input","callback","request","types","getPlacePredictions","active","handleChange","event","target","onChangeValue","AppContext","withStyles","map","margin","width","height","classes","className","center","onReady","m","title","magnitude","useStyles","makeStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","Location","Autocomplete","id","style","getOptionLabel","option","description","filterOptions","x","autoComplete","includeInputInList","disableOpenOnFocus","onChange","renderInput","params","TextField","label","variant","fullWidth","renderOption","matches","structured_formatting","main_text_matched_substrings","parts","parse","main_text","match","offset","length","Grid","container","alignItems","item","xs","part","index","key","fontWeight","highlight","Typography","secondary_text","Map","Boolean","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.50796461.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport {GoogleApiWrapper} from 'google-maps-react';\r\n\r\nconst GoogleMapsContext = React.createContext();\r\nconst GoogleMapsContextProvider = GoogleApiWrapper({\r\n  apiKey: 'AIzaSyD5QaK4xhlY1ZTgwvm8wmiy86NYSzRemmI',\r\n  libraries: ['places']\r\n})((props) => {\r\n  const val = props.google;\r\n\r\n  return (<GoogleMapsContext.Provider value={val}>{props.children}</GoogleMapsContext.Provider>);\r\n});\r\n\r\nconst GoogleMapsContextConsumer = GoogleMapsContext.Consumer; \r\n\r\nexport {\r\n  GoogleMapsContext,\r\n  GoogleMapsContextProvider,\r\n  GoogleMapsContextConsumer\r\n};","import React from 'react';\r\nimport { GoogleMapsContext } from './GoogleMapsContext';\r\nimport throttle from 'lodash/throttle';\r\n\r\nconst useApp = () => {\r\n  const google = React.useContext(GoogleMapsContext);\r\n  const [autocompleteService, setAutoCompleteService] = React.useState(null);\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [options, setOptions] = React.useState([]);\r\n  const [selected, setSelected] = React.useState(null);\r\n  console.log(google);\r\n  const [state, setState] = React.useState({\r\n    initialLat: null,\r\n    initialLng: null,\r\n    error: null,\r\n    zoom: 14,\r\n    markersData: []\r\n  });\r\n  \r\n  React.useEffect(() => Â {\r\n    getUserLocation();\r\n  },[]);\r\n\r\n  React.useEffect(()=> {\r\n    if(google && google.maps) {\r\n      var a = new google.maps.places.AutocompleteService();\r\n      console.log(a);\r\n      setAutoCompleteService(a);\r\n    }\r\n  }, [google]);\r\n\r\n  const getUserLocation = () => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        console.log(position.coords);\r\n        \r\n        setState({\r\n          ...state,\r\n          initialLat: position.coords.latitude,\r\n          initialLng: position.coords.longitude\r\n        });\r\n        \r\n        console.log(state);\r\n      },\r\n      (error) => setState({ error: error.message }),\r\n      { enableHighAccuracy: true, timeout: 10000, maximumAge: 1000 },\r\n    );\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const geocoder = new google.maps.Geocoder;\r\n\r\n    if(selected != null) {\r\n      geocoder.geocode({'placeId': selected.place_id}, function(results, status) {\r\n        if (status === 'OK') {\r\n          getEarthquakesInfo(results[0].geometry.viewport);\r\n          moveMapViewport(results[0].geometry.location.lat(), results[0].geometry.location.lng());\r\n        } else {\r\n          window.alert('Geocoder failed due to: ' + status);\r\n        }\r\n      });\r\n    }\r\n  },[selected]);\r\n\r\n  const onChangeValue = (event, value) => {\r\n    setSelected(value);\r\n  }\r\n\r\n  const getEarthquakesInfo = (bounds) => {\r\n    \r\n    fetch(\r\n      'http://api.geonames.org/earthquakesJSON?north='+ bounds.north + \r\n      '&south=' + bounds.south + \r\n      '&east=' + bounds.east + \r\n      '&west=' + bounds.west + \r\n      '&username=mildredgil'\r\n    )\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      console.log(data);\r\n\r\n      this.setState({ \r\n        ...state,\r\n        markersData : data\r\n       })\r\n    })\r\n  }\r\n\r\n  const moveMapViewport = (lat, lng) => {\r\n    setState({\r\n      ...state,\r\n      initialLat: lat,\r\n      initialLng: lng\r\n    });\r\n  }\r\n\r\n  const handleChange = event => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const fetch = React.useMemo(\r\n    () =>\r\n      throttle((input, callback) => {\r\n        \r\n        const request = {\r\n          input: input,\r\n          types: ['geocode']\r\n        };\r\n        console.log(request);\r\n        autocompleteService.getPlacePredictions(request, callback)\r\n      }, 200),\r\n    [],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    let active = true;\r\n    if (!autocompleteService) {\r\n      return undefined;\r\n    }\r\n    \r\n    if (inputValue === '') {\r\n      console.log(\"input empty\");\r\n      setOptions([]);\r\n      return undefined;\r\n    }\r\n\r\n    const request = {\r\n      input: inputValue,\r\n      types: ['geocode']\r\n    };\r\n    console.log(request);\r\n    autocompleteService.getPlacePredictions(request, function(results, status) {\r\n      if (active) {\r\n        setOptions(results || []);\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [inputValue, fetch]);\r\n\r\n  return {\r\n    state,\r\n    getUserLocation,\r\n    handleChange,\r\n    onChangeValue,\r\n    options,\r\n    google\r\n  }\r\n}\r\n\r\nexport default useApp;","import * as React from \"react\";\r\nimport useApp from './AppContainer';\r\n\r\nconst AppContext = React.createContext();\r\nconst AppContextProvider = (props) => { \r\n  const val = useApp();\r\n\r\n  return (<AppContext.Provider value={val}>{props.children}</AppContext.Provider>);\r\n};\r\n\r\nconst AppContextConsumer = AppContext.Consumer; \r\n\r\nexport {\r\n  AppContext,\r\n  AppContextProvider,\r\n  AppContextConsumer\r\n};","import React from 'react';\r\nimport {Map, Marker} from 'google-maps-react';\r\nimport {AppContext} from './AppContext';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst MapContainer = ({classes}) => {\r\n  const {\r\n    state,\r\n    google,\r\n    getUserLocation,\r\n  } = React.useContext(AppContext);\r\n  \r\n  return (\r\n      <Map google={google} zoom={state.zoom}\r\n      className={classes.map}\r\n      center={{lat: state.initialLat, lng: state.initialLng}}\r\n      onReady={getUserLocation}\r\n      >\r\n        {state.markersData.map(m => {\r\n          return (\r\n          <Marker\r\n            position={{ lat: m.lat, lng: m.lng }}\r\n            title={\"magnitude - \" + m.magnitude}\r\n            data={m}/>\r\n          )\r\n        })}\r\n      </Map>\r\n  );\r\n}\r\n\r\nconst styles = () => ({\r\n  map: {\r\n    position: 'relative',\r\n    margin: 'auto',\r\n    width: '50%',\r\n    height: '500px'\r\n  }\r\n});\r\n \r\nexport default withStyles(styles)(MapContainer);","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport {AppContext} from './AppContext';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  icon: {\r\n    color: theme.palette.text.secondary,\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst Location = () => {\r\n  const classes = useStyles();\r\n  const {\r\n    handleChange,\r\n    onChangeValue,\r\n    options\r\n  } = React.useContext(AppContext);\r\n  return (\r\n    <Autocomplete\r\n      id=\"google-map-demo\"\r\n      style={{ width: 300 }}\r\n      getOptionLabel={option => (typeof option === 'string' ? option : option.description)}\r\n      filterOptions={x => x}\r\n      options={options}\r\n      autoComplete\r\n      includeInputInList\r\n      disableOpenOnFocus\r\n      onChange={onChangeValue}\r\n      renderInput={params => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Add a location\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          onChange={handleChange}\r\n        />\r\n      )}\r\n      renderOption={option => {\r\n        const matches = option.structured_formatting.main_text_matched_substrings;\r\n        const parts = parse(\r\n          option.structured_formatting.main_text,\r\n          matches.map(match => [match.offset, match.offset + match.length]),\r\n        );\r\n\r\n        return (\r\n          <Grid container alignItems=\"center\">\r\n            <Grid item>\r\n              <LocationOnIcon className={classes.icon} />\r\n            </Grid>\r\n            <Grid item xs>\r\n              {parts.map((part, index) => (\r\n                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                  {part.text}\r\n                </span>\r\n              ))}\r\n\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                {option.structured_formatting.secondary_text}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Location;","import React from 'react';\nimport './App.css';\nimport MapContainer from './Map';\nimport Location from './Location';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst App = ({ classes }) => {\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Location />\n        <div className={classes.container}>\n          <MapContainer />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nconst styles = () => ({\n  container: {\n    width: '100%'\n  }\n});\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppContextProvider } from './AppContext';\nimport { GoogleMapsContextProvider } from './GoogleMapsContext';\n\nReactDOM.render(\n    <GoogleMapsContextProvider>\n        <AppContextProvider>\n            <App />\n        </AppContextProvider>\n    </GoogleMapsContextProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}