{"version":3,"sources":["GoogleMapsContext.js","AppContainer.js","AppContext.js","Map.js","Location.js","App.js","serviceWorker.js","index.js"],"names":["GoogleMapsContext","React","GoogleMapsContextProvider","GoogleApiWrapper","apiKey","libraries","props","val","google","Provider","value","children","useApp","Consumer","useContext","useState","autocompleteService","setAutoCompleteService","inputValue","setInputValue","options","setOptions","selected","setSelected","markersData","setMarkersData","zoom","initialLat","initialLng","error","state","setState","useEffect","maps","a","places","AutocompleteService","getUserLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","console","log","message","enableHighAccuracy","timeout","maximumAge","geocoder","Geocoder","geocode","place_id","results","status","getEarthquakesInfo","geometry","viewport","moveMapBounds","location","lat","lng","window","alert","bounds","north","getNorthEast","east","south","getSouthWest","west","fetch","then","res","json","data","earthquakes","active","request","input","types","getPlacePredictions","handleChange","event","target","onChangeValue","onReadyMap","mapProps","map","AppContext","withStyles","height","classes","onReady","className","center","length","m","url","magnitude","title","icon","anchor","Point","scaledSize","Size","useStyles","makeStyles","theme","color","palette","text","secondary","marginRight","spacing","Location","Autocomplete","id","style","width","margin","getOptionLabel","option","description","filterOptions","x","autoComplete","includeInputInList","disableOpenOnFocus","onChange","renderInput","params","TextField","label","variant","fullWidth","renderOption","matches","structured_formatting","main_text_matched_substrings","parts","parse","main_text","match","offset","Grid","container","alignItems","item","xs","part","index","key","fontWeight","highlight","Typography","secondary_text","header","display","counter","padding","borderRadius","backgroundColor","Map","Boolean","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4da888bc.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport {GoogleApiWrapper} from 'google-maps-react';\r\n\r\nconst GoogleMapsContext = React.createContext();\r\nconst GoogleMapsContextProvider = GoogleApiWrapper({\r\n  apiKey: 'AIzaSyAl_XkmnroVhmrli2PoEPdK6toxlUnPVe4',\r\n  libraries: ['places']\r\n})((props) => {\r\n  const val = props.google;\r\n  return (<GoogleMapsContext.Provider value={val}>{props.children}</GoogleMapsContext.Provider>);\r\n});\r\n\r\nconst GoogleMapsContextConsumer = GoogleMapsContext.Consumer; \r\n\r\nexport {\r\n  GoogleMapsContext,\r\n  GoogleMapsContextProvider,\r\n  GoogleMapsContextConsumer\r\n};","import React from 'react';\r\nimport { GoogleMapsContext } from './GoogleMapsContext';\r\nimport throttle from 'lodash/throttle';\r\n\r\nconst useApp = () => {\r\n  const google = React.useContext(GoogleMapsContext);\r\n  const [autocompleteService, setAutoCompleteService] = React.useState(null);\r\n  const [inputValue, setInputValue] = React.useState('');\r\n  const [options, setOptions] = React.useState([]);\r\n  const [selected, setSelected] = React.useState(null);\r\n  const [markersData, setMarkersData] = React.useState([]);\r\n  const [zoom, setZoom] = React.useState(6);\r\n  const [state, setState] = React.useState({\r\n    initialLat: null,\r\n    initialLng: null,\r\n    error: null\r\n  });\r\n  \r\n  React.useEffect(()=> {\r\n    if(google && google.maps) {\r\n      var a = new google.maps.places.AutocompleteService();\r\n      setAutoCompleteService(a);\r\n    }\r\n  }, [google]);\r\n\r\n  const getUserLocation = () => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        setState({\r\n          ...state,\r\n          initialLat: position.coords.latitude,\r\n          initialLng: position.coords.longitude\r\n        });\r\n        console.log(\"user loc\");\r\n      },\r\n      (error) => setState({ error: error.message }),\r\n      { enableHighAccuracy: true, timeout: 10000, maximumAge: 1000 },\r\n    );\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const geocoder = new google.maps.Geocoder;\r\n\r\n    if(selected != null) {\r\n      geocoder.geocode({'placeId': selected.place_id}, function(results, status) {\r\n        if (status === 'OK') {\r\n          getEarthquakesInfo(results[0].geometry.viewport);\r\n          moveMapBounds(results[0].geometry.location.lat(), results[0].geometry.location.lng());\r\n        } else {\r\n          window.alert('Geocoder failed due to: ' + status);\r\n        }\r\n      });\r\n    }\r\n  },[selected]);\r\n\r\n  const onChangeValue = (event, value) => {\r\n    setSelected(value);\r\n  }\r\n\r\n  const getEarthquakesInfo = (bounds) => {\r\n    let north  =   bounds.getNorthEast().lat();   \r\n    let east   =   bounds.getNorthEast().lng();\r\n    let south  =   bounds.getSouthWest().lat();   \r\n    let west   =   bounds.getSouthWest().lng();   \r\n    \r\n    fetch(\r\n      'http://api.geonames.org/earthquakesJSON?north='+ north + \r\n      '&south=' + south + \r\n      '&east=' + east + \r\n      '&west=' + west + \r\n      '&username=mildredgil'\r\n    )\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      setMarkersData(data.earthquakes);\r\n    })\r\n  }\r\n\r\n  const moveMapBounds = (lat, lng) => {\r\n    setState({\r\n      ...state,\r\n      initialLat: lat,\r\n      initialLng: lng\r\n    });\r\n  }\r\n\r\n  const handleChange = event => {\r\n    setInputValue(event.target.value);\r\n  };\r\n  \r\n  React.useEffect(() => {\r\n    let active = true;\r\n    if (autocompleteService == null) {\r\n      return undefined;\r\n    }\r\n    \r\n    if (inputValue === '') {\r\n      setOptions([]);\r\n      return undefined;\r\n    }\r\n\r\n    const request = {\r\n      input: inputValue,\r\n      types: ['geocode']\r\n    };\r\n    autocompleteService.getPlacePredictions(request, function(results, status) {\r\n      if (active) {\r\n        setOptions(results || []);\r\n      }\r\n    })\r\n\r\n    return () => {\r\n      active = false;\r\n    };\r\n  }, [inputValue, fetch]);\r\n\r\n  const onReadyMap = (mapProps, map) => {\r\n    getUserLocation();\r\n  }\r\n\r\n  return {\r\n    state,\r\n    getUserLocation,\r\n    handleChange,\r\n    onChangeValue,\r\n    options,\r\n    markersData,\r\n    google,\r\n    zoom,\r\n    onReadyMap\r\n  }\r\n}\r\n\r\nexport default useApp;","import * as React from \"react\";\r\nimport useApp from './AppContainer';\r\n\r\nconst AppContext = React.createContext();\r\nconst AppContextProvider = (props) => { \r\n  const val = useApp();\r\n\r\n  return (<AppContext.Provider value={val}>{props.children}</AppContext.Provider>);\r\n};\r\n\r\nconst AppContextConsumer = AppContext.Consumer; \r\n\r\nexport {\r\n  AppContext,\r\n  AppContextProvider,\r\n  AppContextConsumer\r\n};","import React from 'react';\r\nimport {Map, Marker} from 'google-maps-react';\r\nimport {AppContext} from './AppContext';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst MapContainer = ({classes}) => {\r\n  const {\r\n    state,\r\n    google,\r\n    markersData,\r\n    zoom,\r\n    onReadyMap\r\n  } = React.useContext(AppContext);\r\n\r\n  let markerUrlGreen = \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\";\r\n  let markerUrlYellow = \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\";\r\n  let markerUrlRed = \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\";\r\n  \r\n  return (\r\n      <Map google={google} zoom={zoom}\r\n      onReady={onReadyMap}\r\n      className={classes.map}\r\n      center={{lat: state.initialLat, lng: state.initialLng}}\r\n      >\r\n        {markersData.length > 0 && \r\n          markersData.map(m => {\r\n            var url = null;\r\n            if(m.magnitude < 3) {\r\n              url = markerUrlGreen;\r\n            } else if(m.magnitude < 5) {\r\n              url = markerUrlYellow;\r\n            } else {\r\n              url = markerUrlRed;\r\n            }\r\n\r\n            return (\r\n            <Marker\r\n              position={{ lat: m.lat, lng: m.lng }}\r\n              title={\"magnitude: \" + m.magnitude}\r\n              data={m}\r\n              icon={{\r\n                url: url,\r\n                anchor: new google.maps.Point(32,32),\r\n                scaledSize: new google.maps.Size(32,32)\r\n              }}\r\n              />\r\n            )\r\n          })}\r\n      </Map>\r\n  );\r\n}\r\n\r\nconst styles = () => ({\r\n  map: {\r\n    height: '85vh !important'\r\n  }\r\n});\r\n \r\nexport default withStyles(styles)(MapContainer);","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport {AppContext} from './AppContext';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  icon: {\r\n    color: theme.palette.text.secondary,\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst Location = () => {\r\n  const classes = useStyles();\r\n  const {\r\n    handleChange,\r\n    onChangeValue,\r\n    options\r\n  } = React.useContext(AppContext);\r\n  return (\r\n    <Autocomplete\r\n      id=\"google-map-demo\"\r\n      style={{ width: '85%', margin: '20px' }}\r\n      getOptionLabel={option => (typeof option === 'string' ? option : option.description)}\r\n      filterOptions={x => x}\r\n      options={options}\r\n      autoComplete\r\n      includeInputInList\r\n      disableOpenOnFocus\r\n      onChange={onChangeValue}\r\n      renderInput={params => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Add a location\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          onChange={handleChange}\r\n        />\r\n      )}\r\n      renderOption={option => {\r\n        const matches = option.structured_formatting.main_text_matched_substrings;\r\n        const parts = parse(\r\n          option.structured_formatting.main_text,\r\n          matches.map(match => [match.offset, match.offset + match.length]),\r\n        );\r\n\r\n        return (\r\n          <Grid container alignItems=\"center\">\r\n            <Grid item>\r\n              <LocationOnIcon className={classes.icon} />\r\n            </Grid>\r\n            <Grid item xs>\r\n              {parts.map((part, index) => (\r\n                <span key={index} style={{ fontWeight: part.highlight ? 700 : 400 }}>\r\n                  {part.text}\r\n                </span>\r\n              ))}\r\n\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                {option.structured_formatting.secondary_text}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Location;","import React from 'react';\nimport './App.css';\nimport MapContainer from './Map';\nimport Location from './Location';\nimport { withStyles } from '@material-ui/core/styles';\nimport {AppContext} from './AppContext';\n\nconst App = ({ classes }) => {\n  const {\n    markersData\n  } = React.useContext(AppContext);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className={classes.header}>\n          <Location />\n          <label className={classes.counter}>{markersData.length}</label>\n        </div>\n      </header>\n      <div className={classes.container}>\n        <MapContainer />\n      </div>\n    </div>\n  );\n}\n\nconst styles = () => ({\n  container: {\n    width: '100%'\n  },\n  header: {\n    display: 'flex',\n    width: '100%'\n  }, \n  counter:{ \n    margin: 'auto',\n    padding: '15px 20px',\n    borderRadius: '10px',\n    backgroundColor: '#ffffff69',\n  }\n\n});\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppContextProvider } from './AppContext';\nimport { GoogleMapsContextProvider } from './GoogleMapsContext';\n\nReactDOM.render(\n    <GoogleMapsContextProvider>\n        <AppContextProvider>\n            <App />\n        </AppContextProvider>\n    </GoogleMapsContextProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}